# Cross toolchain variables
# If these are not in your path, you can make them absolute.
XT_PRG_PREFIX = arm-none-eabi-
CC = $(XT_PRG_PREFIX)gcc
LD = $(XT_PRG_PREFIX)ld

# uARM-related paths
UARM_DIR = ./uarm
INCLUDE_DIR = ./include
UARM_DIR_PREFIX = /usr

#Data and include paths
UARM_INCLUDE_DIR = $(UARM_DIR_PREFIX)/include
LIB_INCLUDE_DIR = $(UARM_INCLUDE_DIR)/uarm

# Compiler options
CFLAGS_LANG = 
CFLAGS_UARM = -mcpu=arm7tdmi -DTARGET_UARM=1
CFLAGS = $(CFLAGS_LANG) $(CFLAGS_UARM) -I$(UARM_DIR) -I$(UARM_DIR)/uarm -I$(INCLUDE_DIR) -I$(UARM_INCLUDE_DIR) -I$(LIB_INCLUDE_DIR) -Wall -O0

#Objects paths
CRTSO_PATH = $(LIB_INCLUDE_DIR)/crtso.o
LIBUARM_PATH = $(LIB_INCLUDE_DIR)/libuarm.o
LIBDIV_PATH = $(LIB_INCLUDE_DIR)/libdiv.o

# Linker options
LDFLAGS = -G 0 -nostdlib -T $(LIB_INCLUDE_DIR)/ldscripts/elf32ltsarm.h.uarmcore.x

# Add the location of crt*.S to the search path
VPATH = $(UARM_DIR)

.PHONY : all clean

all : kernel

utils.o : utils.c include/utils.h
	$(CC) -c $(CFLAGS) $<

scheduler.o : scheduler.c include/scheduler.h
	$(CC) -c $(CFLAGS) $<

interrupt.o : interrupt.c include/interrupt.h
	$(CC) -c $(CFLAGS) $<

syscall.o : syscall.c include/syscall.h
	$(CC) -c $(CFLAGS) $<
	
handler.o : handler.c include/handler.h
	$(CC) -c $(CFLAGS) $<

kernel.o : kernel.c
	$(CC) -c $(CFLAGS) $<

pcb.o : pcb.c include/pcb.h
	$(CC) -c $(CFLAGS) $<

asl.o : asl.c include/asl.h
	$(CC) -c $(CFLAGS) $<

p2test_bikaya_v0.1.o : p2test_bikaya_v0.1.c
	$(CC) -c $(CFLAGS) $<

kernel : pcb.o asl.o utils.o scheduler.o syscall.o interrupt.o kernel.o handler.o p2test_bikaya_v0.1.o
	$(LD) -o $@ $^ $(CRTSO_PATH) $(LIBUARM_PATH) $(LIBDIV_PATH) $(LDFLAGS)

clean:
	-rm -f *.o kernel kernel.*.uarm

# Pattern rule for assembly modules
%.o : %.s
	$(CC) $(CFLAGS) -c -o $@ $<
